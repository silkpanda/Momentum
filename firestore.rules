// firestore.rules (v11 - THE REAL FIX for Dashboard Query)

rules_version = '2';

// We define the service block
service cloud.firestore {

  // === Global Helper Functions ===
  
  function isHouseholdMember(database, memberId) {
    // memberId must be the full composite key "userId_householdId"
    return exists(/databases/$(database)/documents/members/$(memberId));
  }

  function isHouseholdAdmin(database, memberId) {
    let memberPath = /databases/$(database)/documents/members/$(memberId);
    return exists(memberPath) && get(memberPath).data.role == 'admin';
  }
  
  function getHouseholdIdFromMemberId(memberId) {
    // A memberId is "userId_householdId". Split at the underscore.
    return memberId.split('_')[1];
  }

  // === Rules ===
  // Each collection is defined from the root.
  // --- Users Collection ---
  match /databases/{database}/documents/users/{userId} {
    allow create: if request.auth.uid == userId
                    && 'createdAt' in request.resource.data;
    allow get, list: if request.auth != null;
    allow update: if request.auth.uid == userId
                   && !('isAdmin' in request.resource.data);
    allow delete: if false;
  }

  // --- Members Collection ---
  match /databases/{database}/documents/members/{memberId} {
    
    // Helper functions
    function isDataConsistent(data) {
      return memberId == data.userId + '_' + data.householdId;
    }
    
    function isCreatingOwnAdminDoc(data, uid) {
      return uid == data.userId && data.role == 'admin';
    }
    
    function isInvitedByAdmin(data, uid) {
      return isHouseholdAdmin(database, uid + '_' + data.householdId);
    }

    // CREATE:
    allow create: if isDataConsistent(request.resource.data) &&
                    (
                      isCreatingOwnAdminDoc(request.resource.data, request.auth.uid) ||
                      isInvitedByAdmin(request.resource.data, request.auth.uid)
                    );
    
    // --- READ (THE FIX) ---
    
    // 'get' lets a user get a *specific* membership doc
    allow get: if isHouseholdMember(database, request.auth.uid + '_' + getHouseholdIdFromMemberId(memberId));
    
    // 'list' lets the dashboard query for *all* docs where their userId matches.
    // THIS IS THE CORRECTED RULE.
    // It works because your Dashboard query *includes* the 'where("userId", "==", ...)' clause,
    // which satisfies this rule.
    allow list: if request.auth.uid == resource.data.userId;
    
    // --- UPDATE/DELETE ---
    allow update, delete: if isHouseholdAdmin(database, request.auth.uid + '_' + getHouseholdIdFromMemberId(memberId));
  }

  // --- Households Collection ---
  match /databases/{database}/documents/households/{householdId} {
    
    // READ:
    allow get, list: if isHouseholdMember(database, request.auth.uid + '_' + householdId);
    // UPDATE/DELETE:
    allow update, delete: if isHouseholdAdmin(database, request.auth.uid + '_' + householdId);
    // CREATE:
    allow create: if request.auth != null;
        
    // --- Tasks Subcollection ---
    match /tasks/{taskId} {
      
      // CREATE/DELETE:
      allow create, delete: if isHouseholdAdmin(database, request.auth.uid + '_' + householdId);
      
      // READ:
      allow get, list: if isHouseholdMember(database, request.auth.uid + '_' + householdId);
      
      // UPDATE:
      allow update: if 
        isHouseholdAdmin(database, request.auth.uid + '_' + householdId) ||
        (
          request.auth.uid == resource.data.assignedTo &&
          request.resource.data.title == resource.data.title &&
          request.resource.data.points == resource.data.points &&
          request.resource.data.assignedTo == resource.data.assignedTo
        );
    }
  }
}