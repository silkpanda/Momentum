rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions (REMAIN, but LIST rule no longer relies on them) ---
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserProfile(userId) {
      return get(/databases/$(database)/documents/profiles/$(userId));
    }
    
    function getMemberDoc(householdId, profileId) {
    	return get(/databases/$(database)/documents/members/$(profileId + '_' + householdId));
    }
    
    function getProfileIdFromMemberId(memberId) {
        return memberId.split('_')[0];
    }
    
    function isHouseholdMember(householdId) {
      return getUserProfile(request.auth.uid).data.householdId == householdId;
    }

    function isHouseholdAdmin(householdId) {
      let profileId = request.auth.uid;
      return getMemberDoc(householdId, profileId).data.role == 'admin';
    }


    // --- Collection Rules ---

    match /households/{householdId} {
      allow create: if isAuthenticated();
      allow get: if isAuthenticated() && isHouseholdMember(householdId); 
      allow list: if false;
      allow update: if isAuthenticated() && isHouseholdAdmin(householdId);
      allow delete: if false;
    }

    match /profiles/{profileId} {
      allow create: if false;
      // Note: This GET rule is allowed because it's a simple lookup
      allow get: if isAuthenticated() && 
                   (request.auth.uid == profileId || 
                    isHouseholdMember(resource.data.householdId)); 
      allow list: if false;
      allow update: if isAuthenticated() && request.auth.uid == profileId;
      allow delete: if false;
    }
    
    match /members/{memberId} {
      allow create: if false;
      allow get: if isAuthenticated() && getProfileIdFromMemberId(memberId) == request.auth.uid;
      
      // CRITICAL FINAL FIX: This robust EXISTS pattern is the only rule the Firestore engine allows
      // for this specific list operation without erroring.
      allow list: if isAuthenticated() && 
                  // 1. Query MUST be filtered on householdId
                  request.query.where[0][0] == 'householdId' &&
                  // 2. A member doc for the current user MUST exist in the queried household
                  exists(/databases/$(database)/documents/members/$(request.auth.uid + '_' + request.query.where[0][2]));
      
      allow update: if isAuthenticated() && isHouseholdAdmin(resource.data.householdId);
      allow delete: if false;
    }
    
    match /tasks/{taskId} {
        allow read: if isAuthenticated() && isHouseholdMember(resource.data.householdId);
        allow create: if isAuthenticated() && isHouseholdAdmin(request.resource.data.householdId);
        allow update: if isAuthenticated() && (
        	isHouseholdAdmin(resource.data.householdId) || 
            (request.auth.uid == resource.data.assignedProfileId && request.resource.data.keys().hasOnly(['isCompleted']))
        );
        allow delete: if isAuthenticated() && isHouseholdAdmin(resource.data.householdId);
    }
    
    match /storeItems/{itemId} {
        allow read: if isAuthenticated() && isHouseholdMember(resource.data.householdId);
        allow write: if isAuthenticated() && isHouseholdAdmin(request.resource.data.householdId);
    }
  }
}