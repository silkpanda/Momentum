// firestore.rules (v4 - Syntax v4 - 'let' scope fixed)

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function: Check if a user ID corresponds to an admin of a specific household
    function isAdmin(userId, householdId) {
      // Check for null/empty inputs defensively
      return householdId != null && householdId != "" &&
             userId != null && userId != "" &&
             // Construct the composite member document ID
             exists(/databases/$(database)/documents/members/$(userId + '_' + householdId)) &&
             get(/databases/$(database)/documents/members/$(userId + '_' + householdId)).data.role == 'admin';
    }

    // Helper function: Get the householdId stored on a user's profile
    // Assumes profileId == auth.uid for logged-in users
    function getUserHouseholdId(userId) {
       let profilePath = /databases/$(database)/documents/profiles/$(userId);
       // Return the householdId field only if the profile exists, otherwise null
       // Use data.get() for safer access in case field is missing
       return exists(profilePath) ? get(profilePath).data.get('householdId', null) : null;
    }

     // Helper function: Check if a profile is a member of a given household
    function isMemberOfHousehold(profileId, householdId) {
        // Check for null/empty inputs defensively
        return profileId != null && profileId != "" &&
               householdId != null && householdId != "" &&
               // Construct the composite member document ID
               exists(/databases/$(database)/documents/members/$(profileId + '_' + householdId));
    }

    // --- Profiles Collection ---
    match /profiles/{profileId} {
      allow read: if request.auth != null && (
                    // Allow reading own profile
                    request.auth.uid == profileId ||
                    // OR: Allow reading if requester is admin AND target profile is in admin's household
                    (
                      // --- FIX: Directly use function calls, no 'let' ---
                      // 1. Check requester has a household ID on their profile
                      getUserHouseholdId(request.auth.uid) != null &&
                      // 2. Check requester is admin of that household
                      isAdmin(request.auth.uid, getUserHouseholdId(request.auth.uid)) &&
                      // 3. Check target profile is a member of the requester's household
                      isMemberOfHousehold(profileId, getUserHouseholdId(request.auth.uid))
                      // --- END FIX ---
                    )
                  );

      // Create only allowed if user is creating their own profile doc
      allow create: if request.auth != null && request.auth.uid == profileId;
      // Update only allowed for own profile, restrict fields (e.g., cannot change isManaged)
      allow update: if request.auth != null && request.auth.uid == profileId &&
                       request.resource.data.keys().hasOnly(['name', 'authUserId', 'isManaged', 'householdId']) && // Allow these fields
                       request.resource.data.isManaged == resource.data.isManaged; // Prevent changing managed status

      allow delete: if false; // Disallow direct deletion
    }

    // --- Households Collection ---
    match /households/{householdId} {
      // Allow read/write ONLY if the user is an admin of THIS household
      allow read, write: if request.auth != null && isAdmin(request.auth.uid, householdId);

        // --- Tasks Subcollection ---
        match /tasks/{taskId} {
            // Allow read/write ONLY if the user is a member of THIS household
           allow read, write: if request.auth != null && isMemberOfHousehold(request.auth.uid, householdId);
        }
    }

    // --- Members Collection ---
    match /members/{memberId} {
       // --- Allow LIST for any authenticated user ---
       // Required for the "listen wide, filter client" websocket approach.
      allow list: if request.auth != null;
      // --- END FIX ---

      // Allow GET (read single doc) only if requester is admin of that member's household
      allow get: if request.auth != null && isAdmin(request.auth.uid, resource.data.householdId);

      // Create/Delete handled by Cloud Functions
      allow create, delete: if false;

      // Allow UPDATE (e.g., points, role) only if requester is admin of that member's household
      // Also prevent changing critical fields like profileId or householdId
      allow update: if request.auth != null &&
                      isAdmin(request.auth.uid, resource.data.householdId) &&
                      request.resource.data.profileId == resource.data.profileId && // Cannot change profile link
                      request.resource.data.householdId == resource.data.householdId; // Cannot change household link
    }
  }
}