// firestore.emulator.rules
// (FOR LOCAL EMULATOR TESTING ONLY)

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }
    function isAdmin(householdId) {
      let memberId = request.auth.uid + '_' + householdId;
      return exists(/databases/$(database)/documents/members/$(memberId))
        && get(/databases/$(database)/documents/members/$(memberId)).data.role == 'admin';
    }
    function isMember(householdId) {
      let memberId = request.auth.uid + '_' + householdId;
      return exists(/databases/$(database)/documents/members/$(memberId));
    }

    // --- 'profiles' Collection Rules ---
    match /profiles/{profileId} {
      allow create: if isAuth() && request.auth.uid == profileId;
      allow read, update: if isAuth() && request.auth.uid == profileId;
    }
    match /profiles {
      allow list: if isAuth() 
                  && request.query.keys.hasOnly(['authUserId'])
                  && request.query.where.authUserId == request.auth.uid;
    }

    // --- 'households' Collection Rules ---
    match /households/{householdId} {
      allow create: if isAuth(); 
      allow read: if isAuth() && isMember(householdId);
      allow update, delete: if isAuth() && isAdmin(householdId);
    }

    // --- 'members' Collection Rules ---
    match /members/{memberId} {
      allow create: if isAuth() && 
                     ( isAdmin(memberId.split('_')[1]) || 
                       ( request.auth.uid == memberId.split('_')[0] && 
                         request.resource.data.role == 'admin'
                       )
                     );
      allow read: if isAuth() 
                  && (request.auth.uid == memberId.split('_')[0] 
                      || isAdmin(memberId.split('_')[1]));
      allow update, delete: if isAuth() 
                                    && isAdmin(memberId.split('_')[1]);
    }
    
    // Rules for querying the 'members' collection
    match /members {
      
      // --- THIS IS THE "BRUTE FORCE" FIX ---
      // This rule is wide open to bypass the emulator auth bug.
      allow list: if true; 
      // ------------------------------------
    }
  }
}